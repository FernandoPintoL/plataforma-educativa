-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.cache
(
    key character varying(255) COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default" NOT NULL,
    expiration integer NOT NULL,
    CONSTRAINT cache_pkey PRIMARY KEY (key)
);

CREATE TABLE IF NOT EXISTS public.cache_locks
(
    key character varying(255) COLLATE pg_catalog."default" NOT NULL,
    owner character varying(255) COLLATE pg_catalog."default" NOT NULL,
    expiration integer NOT NULL,
    CONSTRAINT cache_locks_pkey PRIMARY KEY (key)
);

CREATE TABLE IF NOT EXISTS public.calificaciones
(
    id bigserial NOT NULL,
    trabajo_id bigint NOT NULL,
    puntaje double precision NOT NULL,
    comentario text COLLATE pg_catalog."default",
    fecha_calificacion timestamp(0) without time zone NOT NULL,
    evaluador_id bigint NOT NULL,
    criterios_evaluacion json,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT calificaciones_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.carreras
(
    id bigserial NOT NULL,
    nombre character varying(255) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default" NOT NULL,
    nivel_educativo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    duracion_anos double precision NOT NULL,
    areas_conocimiento json NOT NULL,
    perfil_ideal json NOT NULL,
    oportunidades_laborales json NOT NULL,
    activo boolean NOT NULL DEFAULT true,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT carreras_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.categorias_test
(
    id bigserial NOT NULL,
    test_vocacional_id bigint NOT NULL,
    nombre character varying(255) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    orden integer NOT NULL DEFAULT 0,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT categorias_test_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.contenido_recurso
(
    id bigserial NOT NULL,
    contenido_id bigint NOT NULL,
    recurso_id bigint NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT contenido_recurso_pkey PRIMARY KEY (id),
    CONSTRAINT contenido_recurso_contenido_id_recurso_id_unique UNIQUE (contenido_id, recurso_id)
);

CREATE TABLE IF NOT EXISTS public.contenidos
(
    id bigserial NOT NULL,
    titulo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    fecha_creacion date NOT NULL,
    fecha_limite date,
    creador_id bigint NOT NULL,
    curso_id bigint NOT NULL,
    tipo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    estado character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'borrador'::character varying,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT contenidos_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.curso_estudiante
(
    id bigserial NOT NULL,
    curso_id bigint NOT NULL,
    estudiante_id bigint NOT NULL,
    fecha_inscripcion date NOT NULL,
    estado character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'activo'::character varying,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT curso_estudiante_pkey PRIMARY KEY (id),
    CONSTRAINT curso_estudiante_curso_id_estudiante_id_unique UNIQUE (curso_id, estudiante_id)
);

CREATE TABLE IF NOT EXISTS public.cursos
(
    id bigserial NOT NULL,
    nombre character varying(255) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    profesor_id bigint NOT NULL,
    codigo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    estado character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'activo'::character varying,
    fecha_inicio date,
    fecha_fin date,
    capacidad_maxima integer,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT cursos_pkey PRIMARY KEY (id),
    CONSTRAINT cursos_codigo_unique UNIQUE (codigo)
);

CREATE TABLE IF NOT EXISTS public.evaluaciones
(
    id bigserial NOT NULL,
    contenido_id bigint NOT NULL,
    tipo_evaluacion character varying(255) COLLATE pg_catalog."default" NOT NULL,
    puntuacion_total integer NOT NULL DEFAULT 100,
    tiempo_limite integer,
    calificacion_automatica boolean NOT NULL DEFAULT false,
    mostrar_respuestas boolean NOT NULL DEFAULT true,
    permite_reintento boolean NOT NULL DEFAULT false,
    max_reintentos integer NOT NULL DEFAULT 1,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT evaluaciones_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.failed_jobs
(
    id bigserial NOT NULL,
    uuid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    connection text COLLATE pg_catalog."default" NOT NULL,
    queue text COLLATE pg_catalog."default" NOT NULL,
    payload text COLLATE pg_catalog."default" NOT NULL,
    exception text COLLATE pg_catalog."default" NOT NULL,
    failed_at timestamp(0) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT failed_jobs_pkey PRIMARY KEY (id),
    CONSTRAINT failed_jobs_uuid_unique UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.job_batches
(
    id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    total_jobs integer NOT NULL,
    pending_jobs integer NOT NULL,
    failed_jobs integer NOT NULL,
    failed_job_ids text COLLATE pg_catalog."default" NOT NULL,
    options text COLLATE pg_catalog."default",
    cancelled_at integer,
    created_at integer NOT NULL,
    finished_at integer,
    CONSTRAINT job_batches_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.jobs
(
    id bigserial NOT NULL,
    queue character varying(255) COLLATE pg_catalog."default" NOT NULL,
    payload text COLLATE pg_catalog."default" NOT NULL,
    attempts smallint NOT NULL,
    reserved_at integer,
    available_at integer NOT NULL,
    created_at integer NOT NULL,
    CONSTRAINT jobs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.materiales_apoyo
(
    id bigserial NOT NULL,
    titulo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    tipo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    url character varying(255) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default" NOT NULL,
    nivel_dificultad integer NOT NULL DEFAULT 1,
    conceptos_relacionados json NOT NULL,
    activo boolean NOT NULL DEFAULT true,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT materiales_apoyo_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.migrations
(
    id serial NOT NULL,
    migration character varying(255) COLLATE pg_catalog."default" NOT NULL,
    batch integer NOT NULL,
    CONSTRAINT migrations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.model_has_permissions
(
    permission_id bigint NOT NULL,
    model_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    model_id bigint NOT NULL,
    CONSTRAINT model_has_permissions_pkey PRIMARY KEY (permission_id, model_id, model_type)
);

CREATE TABLE IF NOT EXISTS public.model_has_roles
(
    role_id bigint NOT NULL,
    model_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    model_id bigint NOT NULL,
    CONSTRAINT model_has_roles_pkey PRIMARY KEY (role_id, model_id, model_type)
);

CREATE TABLE IF NOT EXISTS public.modulos_sidebar
(
    id bigserial NOT NULL,
    titulo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    ruta character varying(255) COLLATE pg_catalog."default" NOT NULL,
    icono character varying(255) COLLATE pg_catalog."default",
    descripcion character varying(255) COLLATE pg_catalog."default",
    orden integer NOT NULL DEFAULT 0,
    activo boolean NOT NULL DEFAULT true,
    es_submenu boolean NOT NULL DEFAULT false,
    modulo_padre_id bigint,
    permisos json,
    color character varying(255) COLLATE pg_catalog."default",
    categoria character varying(255) COLLATE pg_catalog."default",
    visible_dashboard boolean NOT NULL DEFAULT true,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT modulos_sidebar_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notificaciones
(
    id bigserial NOT NULL,
    titulo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    contenido text COLLATE pg_catalog."default" NOT NULL,
    fecha timestamp(0) without time zone NOT NULL,
    destinatario_id bigint NOT NULL,
    leido boolean NOT NULL DEFAULT false,
    tipo character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'general'::character varying,
    datos_adicionales json,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT notificaciones_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.password_reset_tokens
(
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    token character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    CONSTRAINT password_reset_tokens_pkey PRIMARY KEY (email)
);

CREATE TABLE IF NOT EXISTS public.perfiles_vocacionales
(
    id bigserial NOT NULL,
    estudiante_id bigint NOT NULL,
    intereses json NOT NULL,
    habilidades json NOT NULL,
    personalidad json NOT NULL,
    aptitudes json NOT NULL,
    fecha_creacion timestamp(0) without time zone NOT NULL,
    fecha_actualizacion timestamp(0) without time zone NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT perfiles_vocacionales_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.permissions
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    guard_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT permissions_pkey PRIMARY KEY (id),
    CONSTRAINT permissions_name_guard_name_unique UNIQUE (name, guard_name)
);

CREATE TABLE IF NOT EXISTS public.preguntas
(
    id bigserial NOT NULL,
    evaluacion_id bigint NOT NULL,
    enunciado text COLLATE pg_catalog."default" NOT NULL,
    tipo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    opciones json,
    respuesta_correcta character varying(255) COLLATE pg_catalog."default",
    puntos integer NOT NULL DEFAULT 1,
    orden integer NOT NULL DEFAULT 0,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT preguntas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.preguntas_test
(
    id bigserial NOT NULL,
    categoria_test_id bigint NOT NULL,
    enunciado text COLLATE pg_catalog."default" NOT NULL,
    tipo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    opciones json,
    orden integer NOT NULL DEFAULT 0,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT preguntas_test_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.recomendaciones_carrera
(
    id bigserial NOT NULL,
    estudiante_id bigint NOT NULL,
    carrera_id bigint NOT NULL,
    compatibilidad double precision NOT NULL,
    justificacion text COLLATE pg_catalog."default" NOT NULL,
    fecha timestamp(0) without time zone NOT NULL,
    fuente character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT recomendaciones_carrera_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.recomendaciones_material
(
    id bigserial NOT NULL,
    resultado_analisis_id bigint NOT NULL,
    material_apoyo_id bigint NOT NULL,
    estudiante_id bigint NOT NULL,
    relevancia double precision NOT NULL,
    asignado boolean NOT NULL DEFAULT false,
    fecha_asignacion timestamp(0) without time zone,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT recomendaciones_material_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.recursos
(
    id bigserial NOT NULL,
    nombre character varying(255) COLLATE pg_catalog."default" NOT NULL,
    tipo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    url character varying(255) COLLATE pg_catalog."default",
    descripcion text COLLATE pg_catalog."default",
    archivo_path character varying(255) COLLATE pg_catalog."default",
    "tamaño" integer,
    mime_type character varying(255) COLLATE pg_catalog."default",
    activo boolean NOT NULL DEFAULT true,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT recursos_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.rendimiento_academico
(
    id bigserial NOT NULL,
    estudiante_id bigint NOT NULL,
    materias json NOT NULL,
    promedio double precision NOT NULL,
    fortalezas json NOT NULL,
    debilidades json NOT NULL,
    tendencia_temporal character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT rendimiento_academico_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.respuestas_test
(
    id bigserial NOT NULL,
    estudiante_id bigint NOT NULL,
    pregunta_test_id bigint NOT NULL,
    respuesta_seleccionada character varying(255) COLLATE pg_catalog."default" NOT NULL,
    tiempo integer,
    fecha_respuesta timestamp(0) without time zone NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT respuestas_test_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.resultados_analisis
(
    id bigserial NOT NULL,
    trabajo_id bigint NOT NULL,
    sistema_analisis_id bigint NOT NULL,
    areas_fortaleza json NOT NULL,
    areas_debilidad json NOT NULL,
    confianza_predictiva double precision NOT NULL,
    recomendaciones json NOT NULL,
    metadatos json,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT resultados_analisis_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.role_has_permissions
(
    permission_id bigint NOT NULL,
    role_id bigint NOT NULL,
    CONSTRAINT role_has_permissions_pkey PRIMARY KEY (permission_id, role_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    guard_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_name_guard_name_unique UNIQUE (name, guard_name)
);

CREATE TABLE IF NOT EXISTS public.sessions
(
    id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_id bigint,
    ip_address character varying(45) COLLATE pg_catalog."default",
    user_agent text COLLATE pg_catalog."default",
    payload text COLLATE pg_catalog."default" NOT NULL,
    last_activity integer NOT NULL,
    CONSTRAINT sessions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.sistemas_analisis
(
    id bigserial NOT NULL,
    nombre character varying(255) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    tipo_modelo character varying(255) COLLATE pg_catalog."default" NOT NULL,
    parametros json,
    "precision" double precision,
    ultimo_entrenamiento timestamp(0) without time zone,
    activo boolean NOT NULL DEFAULT true,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT sistemas_analisis_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tareas
(
    id bigserial NOT NULL,
    contenido_id bigint NOT NULL,
    instrucciones text COLLATE pg_catalog."default" NOT NULL,
    puntuacion integer NOT NULL DEFAULT 100,
    permite_archivos boolean NOT NULL DEFAULT true,
    max_archivos integer NOT NULL DEFAULT 5,
    tipo_archivo_permitido character varying(255) COLLATE pg_catalog."default",
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT tareas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tests_vocacionales
(
    id bigserial NOT NULL,
    nombre character varying(255) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    duracion_estimada integer,
    activo boolean NOT NULL DEFAULT true,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT tests_vocacionales_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.trabajos
(
    id bigserial NOT NULL,
    contenido_id bigint NOT NULL,
    estudiante_id bigint NOT NULL,
    respuestas json,
    comentarios text COLLATE pg_catalog."default",
    estado character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'en_progreso'::character varying,
    fecha_entrega timestamp(0) without time zone,
    fecha_inicio timestamp(0) without time zone,
    tiempo_total integer,
    intentos integer NOT NULL DEFAULT 0,
    consultas_material integer NOT NULL DEFAULT 0,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    CONSTRAINT trabajos_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id bigserial NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    usernick character varying(255) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    email_verified_at timestamp(0) without time zone,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    remember_token character varying(100) COLLATE pg_catalog."default",
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    apellido character varying(255) COLLATE pg_catalog."default",
    fecha_nacimiento date,
    telefono character varying(255) COLLATE pg_catalog."default",
    direccion text COLLATE pg_catalog."default",
    tipo_usuario character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'estudiante'::character varying,
    activo boolean NOT NULL DEFAULT true,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_unique UNIQUE (email),
    CONSTRAINT users_usernick_unique UNIQUE (usernick)
);

ALTER TABLE IF EXISTS public.calificaciones
    ADD CONSTRAINT calificaciones_evaluador_id_foreign FOREIGN KEY (evaluador_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.calificaciones
    ADD CONSTRAINT calificaciones_trabajo_id_foreign FOREIGN KEY (trabajo_id)
    REFERENCES public.trabajos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.categorias_test
    ADD CONSTRAINT categorias_test_test_vocacional_id_foreign FOREIGN KEY (test_vocacional_id)
    REFERENCES public.tests_vocacionales (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.contenido_recurso
    ADD CONSTRAINT contenido_recurso_contenido_id_foreign FOREIGN KEY (contenido_id)
    REFERENCES public.contenidos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.contenido_recurso
    ADD CONSTRAINT contenido_recurso_recurso_id_foreign FOREIGN KEY (recurso_id)
    REFERENCES public.recursos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.contenidos
    ADD CONSTRAINT contenidos_creador_id_foreign FOREIGN KEY (creador_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.contenidos
    ADD CONSTRAINT contenidos_curso_id_foreign FOREIGN KEY (curso_id)
    REFERENCES public.cursos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.curso_estudiante
    ADD CONSTRAINT curso_estudiante_curso_id_foreign FOREIGN KEY (curso_id)
    REFERENCES public.cursos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.curso_estudiante
    ADD CONSTRAINT curso_estudiante_estudiante_id_foreign FOREIGN KEY (estudiante_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.cursos
    ADD CONSTRAINT cursos_profesor_id_foreign FOREIGN KEY (profesor_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.evaluaciones
    ADD CONSTRAINT evaluaciones_contenido_id_foreign FOREIGN KEY (contenido_id)
    REFERENCES public.contenidos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.model_has_permissions
    ADD CONSTRAINT model_has_permissions_permission_id_foreign FOREIGN KEY (permission_id)
    REFERENCES public.permissions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.model_has_roles
    ADD CONSTRAINT model_has_roles_role_id_foreign FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.modulos_sidebar
    ADD CONSTRAINT modulos_sidebar_modulo_padre_id_foreign FOREIGN KEY (modulo_padre_id)
    REFERENCES public.modulos_sidebar (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notificaciones
    ADD CONSTRAINT notificaciones_destinatario_id_foreign FOREIGN KEY (destinatario_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.perfiles_vocacionales
    ADD CONSTRAINT perfiles_vocacionales_estudiante_id_foreign FOREIGN KEY (estudiante_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.preguntas
    ADD CONSTRAINT preguntas_evaluacion_id_foreign FOREIGN KEY (evaluacion_id)
    REFERENCES public.evaluaciones (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.preguntas_test
    ADD CONSTRAINT preguntas_test_categoria_test_id_foreign FOREIGN KEY (categoria_test_id)
    REFERENCES public.categorias_test (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.recomendaciones_carrera
    ADD CONSTRAINT recomendaciones_carrera_carrera_id_foreign FOREIGN KEY (carrera_id)
    REFERENCES public.carreras (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.recomendaciones_carrera
    ADD CONSTRAINT recomendaciones_carrera_estudiante_id_foreign FOREIGN KEY (estudiante_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.recomendaciones_material
    ADD CONSTRAINT recomendaciones_material_estudiante_id_foreign FOREIGN KEY (estudiante_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.recomendaciones_material
    ADD CONSTRAINT recomendaciones_material_material_apoyo_id_foreign FOREIGN KEY (material_apoyo_id)
    REFERENCES public.materiales_apoyo (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.recomendaciones_material
    ADD CONSTRAINT recomendaciones_material_resultado_analisis_id_foreign FOREIGN KEY (resultado_analisis_id)
    REFERENCES public.resultados_analisis (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.rendimiento_academico
    ADD CONSTRAINT rendimiento_academico_estudiante_id_foreign FOREIGN KEY (estudiante_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.respuestas_test
    ADD CONSTRAINT respuestas_test_estudiante_id_foreign FOREIGN KEY (estudiante_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.respuestas_test
    ADD CONSTRAINT respuestas_test_pregunta_test_id_foreign FOREIGN KEY (pregunta_test_id)
    REFERENCES public.preguntas_test (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.resultados_analisis
    ADD CONSTRAINT resultados_analisis_sistema_analisis_id_foreign FOREIGN KEY (sistema_analisis_id)
    REFERENCES public.sistemas_analisis (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.resultados_analisis
    ADD CONSTRAINT resultados_analisis_trabajo_id_foreign FOREIGN KEY (trabajo_id)
    REFERENCES public.trabajos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.role_has_permissions
    ADD CONSTRAINT role_has_permissions_permission_id_foreign FOREIGN KEY (permission_id)
    REFERENCES public.permissions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.role_has_permissions
    ADD CONSTRAINT role_has_permissions_role_id_foreign FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.tareas
    ADD CONSTRAINT tareas_contenido_id_foreign FOREIGN KEY (contenido_id)
    REFERENCES public.contenidos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.trabajos
    ADD CONSTRAINT trabajos_contenido_id_foreign FOREIGN KEY (contenido_id)
    REFERENCES public.contenidos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.trabajos
    ADD CONSTRAINT trabajos_estudiante_id_foreign FOREIGN KEY (estudiante_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;